{"version":3,"file":"public/js/dist/galactron/actions/action-chain.js","sources":["public/js/dist/galactron/actions/action-chain.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * An ActionChain is a manager of actions which can store a list of actions, run them in sequence,\r\n * and retrieve them by name. The action chain can be started, stopped and restarted.\r\n * \r\n * The ActionChain can also be added to another chain as you would add an action, to provide action\r\n * tree branching.\r\n * \r\n * ActionChains can be initialized with a target object, which will be passed to all of the chain's\r\n * actions as the default target for actions to modify.\r\n * \r\n * @author Garcia Hurtado\r\n */\r\n\r\nclass ActionChain extends Action {\r\n\tconstructor(target){\r\n\t\tsuper(target);\r\n\r\n\t\tthis.actions = new Array();\r\n\t\tthis.actionRegistry = new Array();\r\n\t\tthis.running = false;\r\n\t}\r\n\r\n\tinit(){\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an action and triggers it when the previous one finishes. If the optional \r\n\t * name is provided, it also adds it to the named action registry\r\n\t * @param\taction\r\n\t * @param\tname\r\n\t */\r\n\tchainAction(newAction, name){\r\n\t\tname = name || null;\r\n\t\t\r\n\t\t// Unless this is the first action in the chain, link this new action to the onFinish event\r\n\t\t// of the previous one, so that it starts as soon as the previous one ends\r\n\t\tif(this.actions.length > 0){\r\n\t\t\tvar previousAction = this.actions[this.actions.length - 1];\r\n\t\t\t\r\n\t\t\tif (previousAction) {\r\n\t\t\t\tvar nextAction = newAction;\r\n\t\t\t\tpreviousAction.onFinish(function() {\r\n\t\t\t\t\tnextAction.start();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.addAction(newAction, name);\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an action to the list, without chaining it.\r\n\t * @param\tnewAction\r\n\t * @param\tname\r\n\t * @return\r\n\t */\r\n\taddAction(newAction, name){\r\n\t\t// Only add the target from the ActionChain if no target was previously set\r\n\t\tif (!newAction.target && target) {\r\n\t\t\tnewAction.target = target;\r\n\t\t}\r\n\t\t\r\n\t\tthis.actions.push(newAction);\r\n\t\tif(name){\r\n\t\t\tthis.actionRegistry[name] = newAction;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * If the action chain is currently stopped, it starts the first action in the chain. Otherwise, it has no effect\r\n\t */\r\n\tstart(){\r\n\t\tthis.reset();\r\n\t\tif(this.actions[0]){\r\n\t\t\tthis.actions[0].start();\r\n\t\t\tthis.running = true;\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As long as the Action Chain is running, update all the actions in the chain which are currently running\r\n\t */\r\n\tupdate(){\r\n\t\tif (!this.running) {\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tfor (var action in this.actions) {\r\n\t\t\t\tif(action.running){\r\n\t\t\t\t\taction.update();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all actions in the chain\r\n\t */\r\n\tstopAll(){\r\n\t\tfor (var action in this.actions) {\r\n\t\t\taction.stop();\r\n\t\t}\r\n\t\tthis.running = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all currently running actions on this chain and starts the action specified\r\n\t * @param\tactionName\r\n\t */\r\n\tswitchTo(actionName){\r\n\t\tstopAll();\r\n\t\tthis.actionRegistry[actionName].start();\r\n\t\tthis.running = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Stops all running actions and resets them to their original state\r\n\t */\r\n\treset(){\r\n\t\tthis.running = false;\r\n\t\tfor (var index in this.actions) {\r\n\t\t\tvar action = this.actions[index];\r\n\t\t\taction.init();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the action from the registry that matches the name provided\r\n\t * \r\n\t * @param\tactionName\r\n\t * @return\r\n\t */\r\n\tgetAction(actionName){\r\n\t\tif (this.actionRegistry[actionName] != null) {\r\n\t\t\treturn this.actionRegistry[actionName];\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"There is no action named \" + actionName);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","var __moduleName = $__placeholder__0;","var $__placeholder__0 = $__placeholder__1","$traceurRuntime.superCall($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                   $__placeholder__3)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)"]}