{"version":3,"file":"public/js/dist/galactron/enemies/enemy-wave.js","sources":["public/js/dist/galactron/enemies/enemy-wave.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Represents a wave of enemies that will spawn enemies into the screen until it has created a preset \r\n * number of them.\r\n * \r\n * It uses a sprite factory to recycle sprites. One can be provided externally or the wave will create its own.\r\n * \r\n * @author Garcia\r\n */\r\n\r\nclass EnemyWave extends Phaser.Sprite\r\n{\r\n\t// enemyType;\r\n\t// waveSize; // number of enemies in this wave\r\n\t// spawnDelay; // number of seconds to wait between enemy spawns\r\n\t// spawnTimer; // keep track of the last time we spawned an enemy in this wave\r\n\t// spawnCounter; // how many enemies have spawned in this wave so far\r\n\t// player; // keep track of the player position so that we can aim and shoot at them\r\n\t// bullets; // all the bullets from all the enemies in the wave, to simplify collision\r\n\t// powerups; // the powerups that this wave drops\r\n\t// playState;\r\n\t// fx; // TODO: remove\r\n\t// enemies;\r\n\t\r\n\tEnemyWave(game, x = 0, y = 0, enemyType = null, waveSize = 1, spawnDelay = 0) \r\n\t{\r\n\t\tsuper(game);\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.enemyType = enemyType;\r\n\t\tthis.waveSize = waveSize;\r\n\t\tthis.spawnDelay = spawnDelay;\r\n\t\tthis.enemies = new FlxGroup();\r\n\t\tthis.bullets = new FlxGroup();\r\n\t\tthis.powerups = new FlxGroup();\r\n\t\tthis.fx = new FlxGroup();\r\n\t}\r\n\t\r\n\treset(x, y)\r\n\t{\r\n\t\tsuper.reset(x, y);\r\n\t\tthis.spawnTimer = 0;\r\n\t\tthis.spawnCounter = 0;\r\n\t\tenemies.clear();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check whether enough time has passed in order to spawn a new enemy\r\n\t */\r\n\tupdate() {\r\n\t\tsuper.update();\r\n\t\t\r\n\t\tthis.spawnTimer += FlxG.elapsed;\r\n\t\tif ((spawnTimer > spawnDelay) && (spawnCounter < waveSize)) {\r\n\t\t\tspawnEnemy();\r\n\t\t}\t\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Factory method for enemies part of this wave. It instantiates a new enemy, adds its bullets\r\n\t * to the display list, and provides it with a reference to the player.\r\n\t */\r\n\tspawnEnemy() {\r\n\t\tenemy = recycle(enemyType);\r\n\t\t\r\n\t\tenemy.spriteFactory = spriteFactory;\r\n\t\t\r\n\t\t// to avoid bullets diying with the enemy, we make the enemy use the bullet array in the wave\r\n\t\tenemy.bullets = this.bullets;\r\n\t\t\r\n\t\tenemy.reset(x, y);\r\n\t\tenemy.revive();\r\n\t\tenemy.player = player;\r\n\t\tenemy.wave = this;\r\n\t\t\r\n\t\t// FlxG.state.add(enemy.subSprites); // hack\r\n\t\t\r\n\t\t// check to make sure the enemy is not already part of this wave (ie: being recycled)\r\n\t\tif(enemies.members.indexOf(enemy) == -1){\r\n\t\t\tenemies.add(enemy);\r\n\t\t}\r\n\t\t\r\n\t\tspawnTimer = 0; \r\n\t\tspawnCounter++;\r\n\t}\r\n\t\r\n\t/**\r\n\t * this method to trigger an action when an enemy in this wave is killed, such as dropping\r\n\t * power-ups when all the enemies in the wave have been killed\r\n\t * @param\tenemy\r\n\t */\r\n\tonEnemyKill(enemy) {\r\n\t\t// remove enemy sprite from the group, so it doesn't continue to update after death\r\n\t\tenemies.remove(enemy); \r\n\t\tbullets.remove(enemy.bullets); // same for bullets\r\n\t\t\r\n\t\tif(enemies.countLiving() <= 0){\r\n\t\t\tkill();\r\n\t\t\tdropPowerUp(enemy.x, enemy.y);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Make sure we remove reference to this wave's FX sprites\r\n\t */\r\n\tkill()\r\n\t{\r\n\t\tsuper.kill();\r\n\t\tif (playState) {\r\n\t//\t\tplayState.fx.remove(this.fx);\r\n\t\t}\r\n\t}\r\n\t\r\n\tdropPowerUp(x, y) {\r\n\t\t//return; // debug\r\n\t\tpowerup = recycle(PowerUp);\r\n\t\tpowerup.x = x;\r\n\t\tpowerup.y = y;\r\n\t\tpowerups.add(powerup);\r\n\t}\r\n}\r\n","var __moduleName = $__placeholder__0;","var $__placeholder__0 = $__placeholder__1","$traceurRuntime.defaultSuperCall(this,\n                $__placeholder__0.prototype, arguments)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","$traceurRuntime.superCall($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                   $__placeholder__3)"]}