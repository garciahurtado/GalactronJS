"use strict";
var __moduleName = "src";
var ActionChain = function(target) {
  Action.call(this, target);
  this.actions = new Array();
  this.actionRegistry = new Array();
  this.running = false;
};
ActionChain.prototype.chainAction = function(newAction, name) {
  name = name || null;
  if (this.actions.length > 0) {
    var previousAction = actions[actions.length - 1];
    if (previousAction) {
      var nextAction = newAction;
      previousAction.onFinish(function() {
        nextAction.start();
      });
    }
  }
  this.addAction(newAction, name);
  return this;
};
ActionChain.prototype.addAction = function(newAction, name) {
  if (!newAction.target && ActionChain.prototype.target) {
    newAction.target = ActionChain.prototype.target;
  }
  this.actions.push(newAction);
  if (name) {
    this.actionRegistry[name] = newAction;
  }
  return this;
};
ActionChain.prototype.start = function() {
  this.reset();
  if (this.actions[0]) {
    this.actions[0].start();
    this.running = true;
  }
};
ActionChain.prototype.update = function() {
  if (!this.running) {
    return;
  } else {
    for (var action in this.actions) {
      if (action.running) {
        action.update();
      }
    }
  }
};
ActionChain.prototype.stopAll = function() {
  for (var action in this.actions) {
    action.stop();
  }
  this.running = false;
};
ActionChain.prototype.switchTo = function(actionName) {
  stopAll();
  this.actionRegistry[actionName].start();
  this.running = true;
};
ActionChain.prototype.reset = function() {
  this.running = false;
  for (var action in actions) {
    action.init();
  }
};
ActionChain.prototype.getAction = function(actionName) {
  if (this.actionRegistry[actionName] != null) {
    return this.actionRegistry[actionName];
  } else {
    throw new Error("There is no action named " + actionName);
  }
};
;
var Action = function Action() {
  var target = arguments[0] !== (void 0) ? arguments[0] : null;
  this.target = target;
  this.running;
  this.finished;
  this.finishHandler;
  $Action.init.call(this);
};
var $Action = Action;
($traceurRuntime.createClass)(Action, {
  init: function() {
    this.running = false;
    this.finished = false;
  },
  update: function() {},
  start: function() {
    this.running = true;
    finished = false;
  },
  stop: function() {
    this.running = false;
    this.finished = true;
  },
  finish: function() {
    this.stop();
    if (this.finishHandler != null) {
      this.finishHandler();
    }
    this.init();
  },
  onFinish: function(handler) {
    this.finishHandler = handler;
  }
}, {});

//# sourceMappingURL=src.map
